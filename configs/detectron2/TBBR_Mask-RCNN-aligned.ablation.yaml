MODEL:
    WEIGHTS: ""
    # PIXEL_MEAN: [103.530, 116.280, 123.675, 125, 125]  # Defaults
    # Pixel means: [134.68886773 138.58520521 137.62774752 118.8606566  113.22582686]
    #Pixel stds: [43.53836572 36.76649664 38.94163465 29.93364103 21.23200413]
    #Pixel means: [127.51676698 131.74169674 134.30877031 118.387602   120.52687583]
    #Pixel stds: [44.85939558 43.59383955 42.38654269 32.77335986 20.35507733]
    PIXEL_MEAN: [130., 135., 135., 118.]
    # When using pre-trained models in Detectron1 or any MSRA models,
    # std has been absorbed into its conv1 weights, so the std needs to be set 1.
    # Otherwise, you can use [57.375, 57.120, 58.395] (ImageNet std)
    #PIXEL_STD: [1.0, 1.0, 1.0, 1., 1.]
    PIXEL_STD: [44., 40., 40., 30.]
    RESNETS:
    ## Must set MODEL.RESNETS.RES2_OUT_CHANNELS = 64 for R18/R34
        DEPTH: 18
        RES2_OUT_CHANNELS: 64

    # cfg.MODEL.RESNETS.STEM_OUT_CHANNELS = 5
    # cfg.MODEL.META_ARCHITECTURE = 'GeneralizedRCNN'
    # cfg.MODEL.BACKBONE.NAME = 'build_resnet_fpn_backbone'

    # if you changed the model above, you need to adapt the following line as well
    # cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(
    #     "COCO-InstanceSegmentation/mask_rcnn_R_101_FPN_3x.yaml"
    # )  # Let training initialize from model zoo
    ROI_HEADS:
        BATCH_SIZE_PER_IMAGE: 512  # (default: 512), select smaller if faster training is needed
        NUM_CLASSES: 2  # One class for bridges, one for background to ignore
    #ANCHOR_GENERATOR:
        # Anchor aspect ratios. For each area given in `SIZES`, anchors with different aspect
        # ratios are generated by an anchor generator.
        # Format: list[list[float]]. ASPECT_RATIOS[i] specifies the list of aspect ratios (H/W)
        # to use for IN_FEATURES[i]; len(ASPECT_RATIOS) == len(IN_FEATURES) must be true,
        # or len(ASPECT_RATIOS) == 1 is true and aspect ratio list ASPECT_RATIOS[0] is used
        # for all IN_FEATURES.
        #ASPECT_RATIOS: [0.5, 1.0, 2.0, 4.0, 8.0, 16.0, 32.0, 64.0]
        #ASPECT_RATIOS: [[0.125, 0.25, 0.5, 1.0, 2.0, 4.0, 8.0]] # 16.0, 32.0, 64.0]
        # Relative offset between the center of the first anchor and the top-left corner of the image
        # Value has to be in [0, 1). Recommend to use 0.5, which means half stride.
        # The value is not expected to affect model accuracy.
        #OFFSET: 0.5

DATASETS:
    TRAIN: ("thermals_train",)
    TEST: ("thermals_test",)
# cfg.DATASETS.TEST = ("thermals_test",)
DATALOADER:
    NUM_WORKERS: 32

SEED: 56689614

# Solver configs
SOLVER:
    IMS_PER_BATCH: 8
    AMP:
        ENABLED: True
    BASE_LR: 0.001  # pick a good LR, 0.00025 seems a good start
    MAX_ITER: 30000  # 1000 iterations is a good start, for better accuracy increase this value
    GAMMA: 0.1
    STEPS: (21000, 25000)  # The iteration number to decrease learning rate by GAMMA.
    CHECKPOINT_PERIOD: 5000

OUTPUT_DIR: '/path/to/output/'
